{"ast":null,"code":"const BASE_URLS = {\n  hello: \"http://localhost:8080\",\n  query: \"http://localhost:9000/api/user\",\n  count: \"http://localhost:3333\"\n};\nexport async function getHello() {\n  const response = await fetch(`${BASE_URLS.hello}/get`);\n  return response.json(); // Используем .json() для парсинга данных в объект\n}\nexport async function getUser(name) {\n  const response = await fetch(`http://localhost:9000/api/user?name=${name}`);\n  return response;\n}\nexport async function getCount() {\n  const response = await fetch(`${BASE_URLS.count}/count`);\n  return response.json(); // То же самое для счётчика\n}\nexport async function postCount(value) {\n  const response = await fetch(`${BASE_URLS.count}/count`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: `count=${value}` // Тело запроса содержит данные для инкремента\n  });\n  if (!response.ok) {\n    throw new Error(\"Ошибка обновления счётчика\"); // Генерация исключения, если запрос не успешен\n  }\n\n  // Пытаемся обработать ответ как текст, так как сервер не возвращает JSON\n  const textResponse = await response.text();\n\n  // Преобразуем текстовый ответ в число (если нужно)\n  return parseInt(textResponse, 10); // Возвращаем число для дальнейшей обработки\n}","map":{"version":3,"names":["BASE_URLS","hello","query","count","getHello","response","fetch","json","getUser","name","getCount","postCount","value","method","headers","body","ok","Error","textResponse","text","parseInt"],"sources":["/home/filonovets/Desktop/web-7/src/services/api.js"],"sourcesContent":["const BASE_URLS = {\n    hello: \"http://localhost:8080\",\n    query: \"http://localhost:9000/api/user\",\n    count: \"http://localhost:3333\"\n};\nexport async function getHello() {\n    const response = await fetch(`${BASE_URLS.hello}/get`);\n    return response.json();  // Используем .json() для парсинга данных в объект\n}\n\nexport async function getUser(name) {\n    const response = await fetch(`http://localhost:9000/api/user?name=${name}`);\n    return response;\n}\n\n\nexport async function getCount() {\n    const response = await fetch(`${BASE_URLS.count}/count`);\n    return response.json();  // То же самое для счётчика\n}\n\nexport async function postCount(value) {\n    const response = await fetch(`${BASE_URLS.count}/count`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        body: `count=${value}`, // Тело запроса содержит данные для инкремента\n    });\n\n    if (!response.ok) {\n        throw new Error(\"Ошибка обновления счётчика\"); // Генерация исключения, если запрос не успешен\n    }\n\n    // Пытаемся обработать ответ как текст, так как сервер не возвращает JSON\n    const textResponse = await response.text();\n    \n    // Преобразуем текстовый ответ в число (если нужно)\n    return parseInt(textResponse, 10); // Возвращаем число для дальнейшей обработки\n}\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG;EACdC,KAAK,EAAE,uBAAuB;EAC9BC,KAAK,EAAE,gCAAgC;EACvCC,KAAK,EAAE;AACX,CAAC;AACD,OAAO,eAAeC,QAAQA,CAAA,EAAG;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,SAAS,CAACC,KAAK,MAAM,CAAC;EACtD,OAAOI,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAAE;AAC7B;AAEA,OAAO,eAAeC,OAAOA,CAACC,IAAI,EAAE;EAChC,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuCG,IAAI,EAAE,CAAC;EAC3E,OAAOJ,QAAQ;AACnB;AAGA,OAAO,eAAeK,QAAQA,CAAA,EAAG;EAC7B,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,SAAS,CAACG,KAAK,QAAQ,CAAC;EACxD,OAAOE,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAAE;AAC7B;AAEA,OAAO,eAAeI,SAASA,CAACC,KAAK,EAAE;EACnC,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,SAAS,CAACG,KAAK,QAAQ,EAAE;IACrDU,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAoC,CAAC;IAChEC,IAAI,EAAE,SAASH,KAAK,EAAE,CAAE;EAC5B,CAAC,CAAC;EAEF,IAAI,CAACP,QAAQ,CAACW,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;EACnD;;EAEA;EACA,MAAMC,YAAY,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;;EAE1C;EACA,OAAOC,QAAQ,CAACF,YAAY,EAAE,EAAE,CAAC,CAAC,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}